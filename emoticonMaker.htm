<!DOCTYPE html>
<html>
<head>
<style type="text/css">
	#canvasDiv {
		visibility: hidden;
		position: absolute;
		image-rendering: pixelated;
	}
	td {
		text-align: left;
		padding: 5px;
	}
	td.panel {
		width: 350px;
		line-height: 2em;
	}
	img {
		border: 1px dotted;
	}
	a {
		text-decoration: none;
	}
	a:hover {
		color: red;
	}
</style>
</head>
<body>

<table>
	<tr>
		<td class="panel">
			<div id="canvasDiv"></div>
			<form>
			背景色: <input id="bgc" type="color" value="#209354" onchange="redraw()"><br>
			文字色: <input id="txc" type="color" value="#f8f8f8" onchange="redraw()"><br>
			<input type="checkbox" id="fixw" onchange="redraw()" checked><label for="fixw">固定成品最小寬度(48)</label><br>
			<input type="checkbox" id="adbrd" onchange="redraw()"><label for="adbrd">加入透明邊框</label><br>
			內容: <input id="cnt" value="古默寧" onchange="redraw()"><br>
			字體名稱: <input id="fntfce" value="新細明體" onchange="redraw()"><br>
			字體大小: <input id="fntsz" type="range" min="5" max="20" step="1" value="12" onchange="redraw()">&nbsp;<span id="fntsz_show"></span><br>
			文字間距: <input id="fntsp" type="range" min="0" max="5" step="1" value="2" onchange="redraw()">&nbsp;<span id="fntsp_show"></span><br>			
			文字水平位移: <input id="ofsx" type="range" min="-5" max="5" step="1" value="0" onchange="redraw()">&nbsp;<span id="ofsx_show"></span><br>
			文字垂直位移: <input id="ofsy" type="range" min="-5" max="5" step="1" value="0" onchange="redraw()">&nbsp;<span id="ofsy_show"></span><br>
			圓角半徑: <input id="arcrd" type="range" min="0" max="8" step="1" value="3" onchange="redraw()">&nbsp;<span id="arcrd_show"></span><br>
			檢視倍率: <input id="ratio" type="range" min="1" max="10" step="1" value="5" onchange="redraw()">&nbsp;<span id="ratio_show"></span><br>
			成品下載: <a href="#" download="result.png" onclick="this.href=canvas.toDataURL();">點我</a>
			</form>
		</td>
		<td>
			結果顯示：
			<img id="result" align="middle">
		</td>
	</tr>
</table>

<script>

function getHalfNum(cnt){
	match = content.match(/[\u0000-\u00ff]/g);
	if(match == null){
		return 0;
	}
	return match.length;
}

function redraw(){
	content = document.getElementById("cnt").value;
	bgColor = document.getElementById("bgc").value;
	fixWidth = document.getElementById("fixw").checked;
	addBorder = document.getElementById("adbrd").checked;
	txtColor = document.getElementById("txc").value;
	fontFace = document.getElementById("fntfce").value;
	fontSize = parseInt(document.getElementById("fntsz").value);
	fontSpacing = parseInt(document.getElementById("fntsp").value);
	txtOffsetX = parseInt(document.getElementById("ofsx").value);
	txtOffsetY = parseInt(document.getElementById("ofsy").value);
	arcRadius = parseInt(document.getElementById("arcrd").value);
	viewRatio = parseInt(document.getElementById("ratio").value);
	//widthOffset = parseInt(document.getElementById("ofsw").value);

	document.getElementById("fntsz_show").innerHTML = fontSize;
	document.getElementById("fntsp_show").innerHTML = fontSpacing;
	document.getElementById("ofsx_show").innerHTML = txtOffsetX;
	document.getElementById("ofsy_show").innerHTML = txtOffsetY;
	document.getElementById("arcrd_show").innerHTML = arcRadius;
	document.getElementById("ratio_show").innerHTML = viewRatio;
	//document.getElementById("ofsw_show").innerHTML = widthOffset;

	marginUD = 1;
	marginLR = 1;
	paddingUD = 3;
	paddingLR = 3;
	borderPaddingUD = 3;
	borderPaddingLR = 3;
	bottomPatch = -2;
	cntLen = Math.round(content.length - getHalfNum(content) * 0.5);
	m = cntLen * fontSize + fontSpacing * (content.length-1) + paddingLR * 2;
	if(fixWidth){
		m = Math.max(m, 48 - marginLR * 2);
		document.getElementById("ofsx").max = m / 2;
	}
	else {
		document.getElementById("ofsx").max = 5;
	}

	if(addBorder){
		paddingUD += 3;
	}

	// Estimation of text width
	/**
	canvas.style.letterSpacing = fontSpacing + "px";
	ctx.fillStyle = txtColor;
	ctx.font = fontSize + 'px ' + fontFace;
	m = Math.floor(ctx.measureText(content).width) + widthOffset;
	**/

	w = marginLR * 2 + m;
	h = (marginUD + paddingUD) * 2 + fontSize + bottomPatch;
	div = document.getElementById("canvasDiv");
	div.innerHTML = "<canvas id=\"canvas\" height=\"" + h + "\" width=\"" + w + "\"></canvas>";

	// canvas.width = w;
	// canvas.height = h;
	canvas = document.getElementById('canvas');
	ctx = canvas.getContext('2d');
	ctx.clearRect(0, 0, canvas.width, canvas.height);

	ctx.beginPath();
	ctx.fillStyle = bgColor;
	ctx.fillStyle = null;
	ctx.lineWidth = 0;
	
	ctx.moveTo(marginLR + arcRadius + 0.5, marginUD + 0.5);
	
	ctx.lineTo(marginLR + m - arcRadius + 0.5, marginUD + 0.5);
	
	ctx.arcTo(
		marginLR + m + 0.5,
		marginUD + 0.5,
		marginLR + m + 0.5,
		marginUD + arcRadius + 0.5,
		arcRadius
	);
	
	ctx.lineTo(
		marginLR + m + 0.5,
		marginUD + paddingUD + fontSize + paddingUD + bottomPatch - arcRadius + 0.5
	);
	
	ctx.arcTo(
		marginLR + m + 0.5,
		marginUD + paddingUD + fontSize + paddingUD + bottomPatch + 0.5,
		marginLR + m - arcRadius + 0.5,
		marginUD + paddingUD + fontSize + paddingUD + bottomPatch + 0.5,
		arcRadius
	);
	
	ctx.lineTo(
		marginLR + arcRadius + 0.5,
		marginUD + paddingUD + fontSize + paddingUD + bottomPatch + 0.5
	);
	
	ctx.arcTo(
		marginLR + 0.5,
		marginUD + paddingUD + fontSize + paddingUD + bottomPatch + 0.5,
		marginLR + 0.5,
		marginUD + paddingUD + fontSize + paddingUD - arcRadius + 0.5,
		arcRadius
	);
	
	ctx.lineTo(marginLR + 0.5, marginUD + arcRadius + 0.5);
	
	ctx.arcTo(
		marginLR + 0.5,
		marginUD + 0.5,
		marginLR + arcRadius + 0.5,
		marginUD + 0.5,
		arcRadius
	);

	ctx.closePath();
	ctx.fill();

	canvas.style.letterSpacing = fontSpacing + "px";
	ctx.fillStyle = txtColor;
	ctx.font = fontSize + 'px ' + fontFace;
	ctx.textAlign = "left";
	ctx.textBaseline = "top";
	ctx.fillText(
		content,
		marginLR + paddingLR + txtOffsetX,
		marginUD + paddingUD + txtOffsetY
	);

	if(addBorder){
		ctx.beginPath();
		// ctx.strokeStyle = txtColor;
		ctx.globalCompositeOperation = "destination-out";
		ctx.strokeStyle = "rgba(0, 0, 0, 1)";
		ctx.lineWidth = 2;
		ctx.moveTo(marginLR + arcRadius + 0.5, marginUD + borderPaddingUD + 0.5);
		ctx.lineTo(marginLR + m - arcRadius + 0.5, marginUD + borderPaddingUD + 0.5);
		ctx.arcTo(
			marginLR + m - borderPaddingLR + 0.5,
			marginUD + borderPaddingUD + 0.5,
			marginLR + m - borderPaddingLR + 0.5,
			marginUD + arcRadius + 0.5,
			arcRadius - borderPaddingLR
		);
		ctx.lineTo(
			marginLR + m - borderPaddingLR + 0.5,
			marginUD + paddingUD + fontSize + paddingUD + bottomPatch - arcRadius + 0.5
		);
		ctx.arcTo(
			marginLR + m - borderPaddingLR + 0.5,
			marginUD + paddingUD + fontSize + paddingUD + bottomPatch - borderPaddingUD + 0.5,
			marginLR + m - arcRadius + 0.5,
			marginUD + paddingUD + fontSize + paddingUD + bottomPatch - borderPaddingUD + 0.5,
			arcRadius - borderPaddingLR
		);
		ctx.lineTo(
			marginLR + arcRadius + 0.5,
			marginUD + paddingUD + fontSize + paddingUD + bottomPatch - borderPaddingUD + 0.5
		);
		ctx.arcTo(
			marginLR + borderPaddingLR + 0.5,
			marginUD + paddingUD + fontSize + paddingUD + bottomPatch - borderPaddingUD + 0.5,
			marginLR + borderPaddingLR + 0.5,
			marginUD + paddingUD + fontSize + paddingUD + bottomPatch - arcRadius + 0.5,
			arcRadius - borderPaddingLR
		);
		ctx.lineTo(
			marginLR + borderPaddingLR + 0.5,
			marginUD + arcRadius + 0.5
		);
		ctx.arcTo(
			marginLR + borderPaddingLR + 0.5,
			marginUD + borderPaddingUD + 0.5,
			marginLR + arcRadius + 0.5,
			marginUD + borderPaddingUD + 0.5,
			arcRadius - borderPaddingLR
		);
		ctx.stroke();
	}
	
	img = document.getElementById('result');
	img.src = canvas.toDataURL('image/png');
	img.width = canvas.width * viewRatio;
	img.height = canvas.height * viewRatio;
}

redraw();

</script>

</body>
</html>
